#ifndef _K_VFS_H
#define _K_VFS_H 1

#include <stddef.h>
#include <stdint.h>

#define VFS_FILENAME_MAX (256)

#pragma pack(1)
// All structs below must be packed to single bytes

// File request is generated by fopen and sent to kernel (either by syscall or libk)
typedef struct vfs_fileRequest {
    char filename[256]; // Filename of requested file
    char reserved[256]; // Reserved until an FS driver is written
} vfs_fileRequest_t;

// vnode structure aligns on 512 byte boundaries
typedef struct vnode {
    char filename[256];
    char reserve1[228]; // Reserved until an FS driver is written
    uint64_t buffer;    // Address of buffer (upper 4 bytes reserved on i686)
    uint64_t size;      // File size in bytes
    uint64_t soffset;   // Seek offset
    uint8_t  flags;     
    /*
    flags bit meaning
    7 - RES
    6 - RES
    5 - RES
    4 - RES
    3 - RES
    2 - RES
    1 - Open for write
    0 - Open for read
    */
    char reserve2[3];   // Reserved
} vnode_t;

#pragma pack(0)

void vfs_init(void);        // Initialize VFS structures
void vfs_newbuffer(char*, void*);
void* vfs_getbuffer(char*);
size_t vfs_fread(void*, size_t, size_t, vnode_t*);  // Read from a buffer pointed to by a vnode

#endif
